// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package db

import (
	"context"
)

const getResource = `-- name: GetResource :one
SELECT resources.type,
    resources.json_data AS data
FROM resources
WHERE id = ?
`

type GetResourceRow struct {
	Type int64
	Data interface{}
}

func (q *Queries) GetResource(ctx context.Context, id interface{}) (GetResourceRow, error) {
	row := q.db.QueryRowContext(ctx, getResource, id)
	var i GetResourceRow
	err := row.Scan(&i.Type, &i.Data)
	return i, err
}

const listAllResources = `-- name: ListAllResources :many
SELECT resources.type,
    resources.json_data AS data
FROM resources
ORDER BY resources.name ASC
`

type ListAllResourcesRow struct {
	Type int64
	Data interface{}
}

func (q *Queries) ListAllResources(ctx context.Context) ([]ListAllResourcesRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllResources)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllResourcesRow
	for rows.Next() {
		var i ListAllResourcesRow
		if err := rows.Scan(&i.Type, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTypedResourcesInProject = `-- name: ListTypedResourcesInProject :many
SELECT resources.type,
    resources.json_data AS data
FROM resources
WHERE project_id = ?
    AND type = ?
ORDER BY resources.name ASC
`

type ListTypedResourcesInProjectParams struct {
	ProjectID interface{}
	Type      int64
}

type ListTypedResourcesInProjectRow struct {
	Type int64
	Data interface{}
}

func (q *Queries) ListTypedResourcesInProject(ctx context.Context, arg ListTypedResourcesInProjectParams) ([]ListTypedResourcesInProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, listTypedResourcesInProject, arg.ProjectID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTypedResourcesInProjectRow
	for rows.Next() {
		var i ListTypedResourcesInProjectRow
		if err := rows.Scan(&i.Type, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
