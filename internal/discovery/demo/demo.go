package demo

import (
	"context"
	"time"

	"github.com/brianvoe/gofakeit/v6"
	"github.com/cyclimse/scwtui/internal/resource"
	"github.com/cyclimse/scwtui/internal/resource/demo"
	"github.com/scaleway/scaleway-sdk-go/namegenerator"
	"github.com/scaleway/scaleway-sdk-go/scw"
)

const (
	// minDemoResources is the minimum number of resources that will be generated by the demo discovery.
	minDemoResources = 10

	// maxDemoResources is the maximum number of resources that will be generated by the demo discovery.
	maxDemoResources = 100
)

func NewDiscovery() *Discovery {
	// Generate all localities
	allLocalities := make([]resource.Locality, 0, len(scw.AllRegions)+len(scw.AllZones)+1) // +1 for global locality

	for _, region := range scw.AllRegions {
		allLocalities = append(allLocalities, resource.Region(region))
	}

	for _, zone := range scw.AllZones {
		allLocalities = append(allLocalities, resource.Zone(zone))
	}

	allLocalities = append(allLocalities, resource.Global)

	// Generate all statuses

	allStatuses := make([]resource.Status, 0, 3)
	allStatuses = append(allStatuses, resource.StatusReady)
	allStatuses = append(allStatuses, resource.StatusError)
	allStatuses = append(allStatuses, resource.StatusUnknown)

	// Generate fake projects

	numFakeProjects := gofakeit.IntRange(1, 10)
	fakeProjects := make([]resource.Resource, 0, numFakeProjects)

	for i := 0; i < numFakeProjects; i++ {
		projectID := gofakeit.UUID()
		description := gofakeit.Sentence(10)

		fakeProject := &demo.Resource{
			MetadataValue: resource.Metadata{
				Name:        namegenerator.GetRandomName("project"),
				ID:          projectID,
				ProjectID:   projectID,
				Description: &description,
				Tags:        nil,
				Type:        resource.TypeProject,
			},
			RawLocality: "global",
		}
		fakeProjects = append(fakeProjects, fakeProject)
	}

	return &Discovery{
		allLocalities:            allLocalities,
		allStatuses:              allStatuses,
		fakeProjects:             fakeProjects,
		countResourcesToGenerate: gofakeit.IntRange(minDemoResources, maxDemoResources),
	}
}

type Discovery struct {
	allLocalities            []resource.Locality
	allStatuses              []resource.Status
	fakeProjects             []resource.Resource
	countResourcesToGenerate int
}

func (d *Discovery) Discover(_ context.Context, ch chan resource.Resource) error {
	for i := 0; i < d.countResourcesToGenerate; i++ {
		ch <- d.resource()

		// sleep a bit to simulate a real discovery
		time.Sleep(200 * time.Millisecond)
	}

	return nil
}

func (d *Discovery) resource() resource.Resource {
	chosenProject := d.fakeProjects[gofakeit.IntRange(0, len(d.fakeProjects)-1)]

	numTags := gofakeit.IntRange(0, 10)
	tags := make([]string, 0, numTags)
	for i := 0; i < numTags; i++ {
		tags = append(tags, gofakeit.Word())
	}

	resourceType := resource.Type(gofakeit.IntRange(0, int(resource.NumberOfResourceTypes)-1))
	locality := d.allLocalities[gofakeit.IntRange(0, len(d.allLocalities)-1)]

	// give 50% chance to have a status
	var status resource.Status
	if gofakeit.IntRange(0, 100) < 50 {
		status = d.allStatuses[gofakeit.IntRange(0, len(d.allStatuses)-1)]
	}

	return &demo.Resource{
		MetadataValue: resource.Metadata{
			Name:      namegenerator.GetRandomName(),
			ID:        gofakeit.UUID(),
			ProjectID: chosenProject.Metadata().ID,
			Tags:      tags,
			Type:      resourceType,
			Status:    statusPtr(status),
		},
		RawLocality: locality.String(),
	}
}

func (d *Discovery) Projects() []resource.Resource {
	return d.fakeProjects
}

func statusPtr(status resource.Status) *resource.Status {
	if status == "" {
		return nil
	}

	return &status
}
